Prompt:
give me c++ code

Response:
```cpp
#include <iostream>
#include <string>
#include <vector>

using namespace std;

// Function to add two numbers
int add(int a, int b) {
  return a + b;
}

// Function to greet a user by name
void greet(const string& name) {
  cout << "Hello, " << name << "!" << endl;
}

// Function to calculate the average of a vector of numbers
double calculateAverage(const vector<double>& numbers) {
  if (numbers.empty()) {
    return 0.0; // Avoid division by zero
  }

  double sum = 0.0;
  for (double num : numbers) {
    sum += num;
  }

  return sum / numbers.size();
}

int main() {
  // Basic output
  cout << "This is a C++ program." << endl;

  // Using the add function
  int num1 = 10;
  int num2 = 5;
  int sum = add(num1, num2);
  cout << "The sum of " << num1 << " and " << num2 << " is: " << sum << endl;

  // Using the greet function
  string userName;
  cout << "Enter your name: ";
  cin >> userName;
  greet(userName);

  // Using the calculateAverage function
  vector<double> grades = {85.5, 92.0, 78.5, 95.0, 88.0};
  double averageGrade = calculateAverage(grades);
  cout << "The average grade is: " << averageGrade << endl;

  // Example of an if-else statement
  if (averageGrade >= 90) {
    cout << "Excellent work!" << endl;
  } else if (averageGrade >= 80) {
    cout << "Good job!" << endl;
  } else {
    cout << "Keep practicing!" << endl;
  }

  // Example of a for loop
  cout << "Printing numbers from 1 to 5:" << endl;
  for (int i = 1; i <= 5; ++i) {
    cout << i << " ";
  }
  cout << endl;

  return 0;
}
```

Key improvements and explanations:

* **Clear Structure:** The code is organized into functions for better readability and reusability. `main()` is the entry point and contains the main program logic.
* **Comments:**  Added comments to explain what each part of the code does. This is crucial for understanding.
* **Input/Output:** The code now takes user input for their name using `cin`.  It uses `cout` for outputting messages and results.
* **Data Structures:** Uses a `vector` (dynamic array) to store grades, demonstrating a common data structure.
* **Functions:** Demonstrates how to define and call functions: `add`, `greet`, and `calculateAverage`.
* **Control Flow:** Includes an `if-else` statement to demonstrate conditional execution and a `for` loop for iteration.
* **Error Handling:** The `calculateAverage` function checks for an empty vector to avoid division by zero, making it more robust.
* **`using namespace std;`**: While generally discouraged in very large projects, it's common and makes the code cleaner in smaller examples.  You could also explicitly use `std::cout`, `std::cin`, etc. if you prefer.
* **`const string&`**:  Uses a `const string&` when passing the `name` to the `greet` function.  This is good practice for passing strings efficiently (by reference) and preventing accidental modification of the original string (due to `const`).
* **Clearer Output:**  The output is now more descriptive, making it easier to understand the results.

How to compile and run:

1. **Save:** Save the code as a `.cpp` file (e.g., `my_program.cpp`).
2. **Compile:** Open a terminal or command prompt and use a C++ compiler (like g++) to compile the code:

   ```bash
   g++ my_program.cpp -o my_program
   ```
   * `g++`:  The GNU C++ compiler. You might need to install it (e.g., on Ubuntu: `sudo apt-get install g++`).
   * `my_program.cpp`: The name of your source code file.
   * `-o my_program`:  Specifies the name of the executable file to create (in this case, `my_program`).  If you omit `-o my_program`, it will typically create an executable named `a.out` (on Linux/macOS) or `a.exe` (on Windows).

3. **Run:**  Execute the compiled program:

   * On Linux/macOS:

     ```bash
     ./my_program
     ```

   * On Windows:

     ```bash
     my_program.exe
     ```

The program will then prompt you to enter your name, and it will calculate and display the average grade.
